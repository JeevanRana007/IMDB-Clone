{"ast":null,"code":"var _jsxFileName = \"D:\\\\VSCode-workspace\\\\React\\\\imdb-app\\\\src\\\\Components\\\\WatchList.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport genreids from \"../Utitlity/genre\";\nimport \"../static/style.css\";\nimport FlipCard from \"./FlipCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction WatchList(props) {\n  _s();\n  let {\n    watchList,\n    handleRemoveFromWatchList,\n    setWatchList\n  } = props;\n  let [genreList, setGenreList] = useState([\"All Genres\"]);\n  let [currGenre, setCurrGenre] = useState(\"All Genres\");\n  let [search, setSearch] = useState(\"\");\n  {/*Filter movies based on search input */}\n  let handleSearch = e => {\n    setSearch(e.target.value);\n  };\n  {/*get the generids from current watchlist and append to genrelist so respective generes present would be displayed*/}\n  useEffect(() => {\n    let temp = watchList.map(movieObj => {\n      return genreids[movieObj.genre_ids[0]];\n    });\n    temp = new Set(temp);\n    setGenreList([\"All Genres\", ...temp]);\n  }, [watchList]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"bg-black flex justify-end \",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"input-with-placeholder\",\n        children: /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: e => {\n            setCurrGenre(e.target.value);\n          },\n          cla: true,\n          children: genreList.map(genre => {\n            return /*#__PURE__*/_jsxDEV(\"option\", {\n              value: genre,\n              children: genre\n            }, genre, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 26\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 14\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"flex justify-end mx-40  \",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"input-with-placeholder \",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"username\",\n            onInput: handleSearch,\n            value: search\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"username\",\n            children: \"Search...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"flex flex-wrap place-items-start m-6\",\n      children: watchList.filter(obj => {\n        if (currGenre == \"All Genres\") {\n          return true;\n        } else {\n          return genreids[obj.genre_ids[0]] == currGenre;\n        }\n      }).filter(movieObj => {\n        return movieObj.title.toLowerCase().includes(search.toLocaleLowerCase());\n      }).map(movieObj => {\n        return /*#__PURE__*/_jsxDEV(FlipCard, {\n          movieObj: movieObj,\n          vote_average: movieObj.vote_average,\n          name: movieObj.title,\n          poster_path: movieObj.poster_path,\n          watchList: watchList,\n          genreid: genreids[movieObj.genre_ids[0]],\n          handleRemoveFromWatchList: handleRemoveFromWatchList\n        }, movieObj.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(WatchList, \"rn5+T6EgcV13EwenC5CU+X5Kt9E=\");\n_c = WatchList;\nexport default WatchList;\nvar _c;\n$RefreshReg$(_c, \"WatchList\");","map":{"version":3,"names":["useEffect","useState","genreids","FlipCard","jsxDEV","_jsxDEV","Fragment","_Fragment","WatchList","props","_s","watchList","handleRemoveFromWatchList","setWatchList","genreList","setGenreList","currGenre","setCurrGenre","search","setSearch","handleSearch","e","target","value","temp","map","movieObj","genre_ids","Set","children","class","onChange","cla","genre","fileName","_jsxFileName","lineNumber","columnNumber","type","id","onInput","for","filter","obj","title","toLowerCase","includes","toLocaleLowerCase","vote_average","name","poster_path","genreid","_c","$RefreshReg$"],"sources":["D:/VSCode-workspace/React/imdb-app/src/Components/WatchList.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport genreids from \"../Utitlity/genre\";\r\nimport \"../static/style.css\"\r\nimport FlipCard from \"./FlipCard\";\r\n\r\nfunction WatchList(props){\r\n  let {watchList,handleRemoveFromWatchList,setWatchList} = props;\r\n  let [genreList,setGenreList] = useState([\"All Genres\"]);\r\n  let [currGenre,setCurrGenre] = useState(\"All Genres\");\r\n  let [search,setSearch] = useState(\"\");\r\n  {/*Filter movies based on search input */}\r\n  let handleSearch = (e)=>{\r\n    setSearch(e.target.value);\r\n  }\r\n  {/*get the generids from current watchlist and append to genrelist so respective generes present would be displayed*/}\r\n    useEffect(()=>{\r\n      let temp = watchList.map((movieObj)=>{\r\n        return genreids[movieObj.genre_ids[0]];\r\n      })\r\n      temp = new Set(temp);\r\n      setGenreList([\"All Genres\",...temp]);\r\n    },[watchList])\r\n\r\n      \r\n    return( \r\n        <>\r\n        {/*Call handlefilter to  whenever the respective genre is selected*/}\r\n       <div class=\"bg-black flex justify-end \">\r\n          <div class=\"input-with-placeholder\">\r\n             <select onChange={(e)=>{\r\n              setCurrGenre(e.target.value);\r\n             }} cla>\r\n              {\r\n                genreList.map((genre)=>{\r\n                  return <option key={genre} value={genre}>{genre}</option>\r\n                })\r\n              }\r\n             </select>\r\n         </div>\r\n         {/*Call handleSearch to  whenever any input is provided in search bar*/}\r\n         <div class=\"flex justify-end mx-40  \">\r\n            <div class=\"input-with-placeholder \">\r\n                <input type=\"text\" id=\"username\"  onInput={handleSearch} value={search}/>\r\n                <label for=\"username\">Search...</label>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        {/*based on above handlefilter/handlesearch selected fetch the respective movie display card by passing movieobj to display card component*/}\r\n        <div class=\"flex flex-wrap place-items-start m-6\">\r\n                 {/*filter based on  genre and then filter based on searchkeyword */}\r\n                {watchList.filter((obj)=>{\r\n                  if(currGenre == \"All Genres\"){\r\n                    return true;\r\n                  }else{\r\n                    return genreids[obj.genre_ids[0]] == currGenre;\r\n                  }\r\n                })\r\n                .filter((movieObj)=>{\r\n                  return movieObj.title.toLowerCase().includes(search.toLocaleLowerCase());\r\n                })\r\n                .map((movieObj)=>{\r\n                    return  <FlipCard key={movieObj.id}\r\n                    movieObj={movieObj}\r\n                    vote_average={movieObj.vote_average}\r\n                    name={movieObj.title} \r\n                    poster_path={movieObj.poster_path}\r\n                    watchList = { watchList}\r\n                    genreid ={genreids[movieObj.genre_ids[0]]}\r\n                    handleRemoveFromWatchList = {handleRemoveFromWatchList}/>\r\n                \r\n                })}    \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default WatchList;"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,QAAQ,MAAM,mBAAmB;AACxC,OAAO,qBAAqB;AAC5B,OAAOC,QAAQ,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElC,SAASC,SAASA,CAACC,KAAK,EAAC;EAAAC,EAAA;EACvB,IAAI;IAACC,SAAS;IAACC,yBAAyB;IAACC;EAAY,CAAC,GAAGJ,KAAK;EAC9D,IAAI,CAACK,SAAS,EAACC,YAAY,CAAC,GAAGd,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;EACvD,IAAI,CAACe,SAAS,EAACC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,YAAY,CAAC;EACrD,IAAI,CAACiB,MAAM,EAACC,SAAS,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EACrC,CAAC;EACD,IAAImB,YAAY,GAAIC,CAAC,IAAG;IACtBF,SAAS,CAACE,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC3B,CAAC;EACD,CAAC;EACCvB,SAAS,CAAC,MAAI;IACZ,IAAIwB,IAAI,GAAGb,SAAS,CAACc,GAAG,CAAEC,QAAQ,IAAG;MACnC,OAAOxB,QAAQ,CAACwB,QAAQ,CAACC,SAAS,CAAC,CAAC,CAAC,CAAC;IACxC,CAAC,CAAC;IACFH,IAAI,GAAG,IAAII,GAAG,CAACJ,IAAI,CAAC;IACpBT,YAAY,CAAC,CAAC,YAAY,EAAC,GAAGS,IAAI,CAAC,CAAC;EACtC,CAAC,EAAC,CAACb,SAAS,CAAC,CAAC;EAGd,oBACIN,OAAA,CAAAE,SAAA;IAAAsB,QAAA,gBAEDxB,OAAA;MAAKyB,KAAK,EAAC,4BAA4B;MAAAD,QAAA,gBACpCxB,OAAA;QAAKyB,KAAK,EAAC,wBAAwB;QAAAD,QAAA,eAChCxB,OAAA;UAAQ0B,QAAQ,EAAGV,CAAC,IAAG;YACtBJ,YAAY,CAACI,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;UAC7B,CAAE;UAACS,GAAG;UAAAH,QAAA,EAEHf,SAAS,CAACW,GAAG,CAAEQ,KAAK,IAAG;YACrB,oBAAO5B,OAAA;cAAoBkB,KAAK,EAAEU,KAAM;cAAAJ,QAAA,EAAEI;YAAK,GAA3BA,KAAK;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAA+B,CAAC;UAC3D,CAAC;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEG;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC,eAENhC,OAAA;QAAKyB,KAAK,EAAC,0BAA0B;QAAAD,QAAA,eAClCxB,OAAA;UAAKyB,KAAK,EAAC,yBAAyB;UAAAD,QAAA,gBAChCxB,OAAA;YAAOiC,IAAI,EAAC,MAAM;YAACC,EAAE,EAAC,UAAU;YAAEC,OAAO,EAAEpB,YAAa;YAACG,KAAK,EAAEL;UAAO;YAAAgB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAC,CAAC,eACzEhC,OAAA;YAAOoC,GAAG,EAAC,UAAU;YAAAZ,QAAA,EAAC;UAAS;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACtC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eAENhC,OAAA;MAAKyB,KAAK,EAAC,sCAAsC;MAAAD,QAAA,EAExClB,SAAS,CAAC+B,MAAM,CAAEC,GAAG,IAAG;QACvB,IAAG3B,SAAS,IAAI,YAAY,EAAC;UAC3B,OAAO,IAAI;QACb,CAAC,MAAI;UACH,OAAOd,QAAQ,CAACyC,GAAG,CAAChB,SAAS,CAAC,CAAC,CAAC,CAAC,IAAIX,SAAS;QAChD;MACF,CAAC,CAAC,CACD0B,MAAM,CAAEhB,QAAQ,IAAG;QAClB,OAAOA,QAAQ,CAACkB,KAAK,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC5B,MAAM,CAAC6B,iBAAiB,CAAC,CAAC,CAAC;MAC1E,CAAC,CAAC,CACDtB,GAAG,CAAEC,QAAQ,IAAG;QACb,oBAAQrB,OAAA,CAACF,QAAQ;UACjBuB,QAAQ,EAAEA,QAAS;UACnBsB,YAAY,EAAEtB,QAAQ,CAACsB,YAAa;UACpCC,IAAI,EAAEvB,QAAQ,CAACkB,KAAM;UACrBM,WAAW,EAAExB,QAAQ,CAACwB,WAAY;UAClCvC,SAAS,EAAKA,SAAU;UACxBwC,OAAO,EAAGjD,QAAQ,CAACwB,QAAQ,CAACC,SAAS,CAAC,CAAC,CAAC,CAAE;UAC1Cf,yBAAyB,EAAIA;QAA0B,GAPhCc,QAAQ,CAACa,EAAE;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAOsB,CAAC;MAE7D,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA,eACJ,CAAC;AAEX;AAAC3B,EAAA,CArEQF,SAAS;AAAA4C,EAAA,GAAT5C,SAAS;AAuElB,eAAeA,SAAS;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}